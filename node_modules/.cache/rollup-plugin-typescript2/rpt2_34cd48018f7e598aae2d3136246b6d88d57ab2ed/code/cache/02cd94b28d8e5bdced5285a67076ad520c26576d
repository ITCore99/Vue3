{"code":"import { isObject } from '@vue/shared';\r\nimport { mutableHandlers, shallowReadonlyHandlers, shallowReactiveHandlers, readonlyHandlers } from './baseHandlers';\r\nfunction reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers);\r\n}\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\nfunction readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n// 用于存储代理过的对象 已经被代理过的对象将不在被代理\r\nconst reactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\n// 创建一个响应式对象\r\nfunction createReactiveObject(target, isReadonly, handlers) {\r\n    if (!isObject(target)) {\r\n        return target;\r\n    }\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const existProxy = proxyMap.get(target);\r\n    if (existProxy) {\r\n        return existProxy;\r\n    }\r\n    const proxy = new Proxy(target, handlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nexport { reactive, shallowReactive, readonly, shallowReadonly };\r\n","references":["/Users/fuzhuoning/Desktop/own/vue3/packages/shared/src/index.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/reactivity/src/baseHandlers.ts"]}
