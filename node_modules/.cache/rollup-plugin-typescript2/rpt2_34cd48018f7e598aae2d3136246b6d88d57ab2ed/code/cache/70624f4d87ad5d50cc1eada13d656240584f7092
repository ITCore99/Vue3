{"code":"import { effect } from \"@vue/reactivity\";\r\nimport { createAppApi } from \"./apiCreateApp\";\r\nimport { createInitialInstance, setupComponent } from \"./component\";\r\nimport { queueJob } from \"./sechduler\";\r\nimport { normalizeVNode, TEXT } from \"./vnode\";\r\n/**\r\n * 渲染流程: 首先将组件转化为虚拟节点 根据虚拟节点进行挂载(patch) 在组建挂载的时候执行setup方法和渲染模板生成组件的render函数 render函数执行\r\n * 会返回此组件子树的虚拟节点 在根据子树虚拟执行patch方法挂载子树 最终挂载的整个流程。\r\n * 每个组件都是一个effect\r\n * @param renderOptions\r\n * @returns\r\n */\r\n// 创建一个渲染器 这样写的好处是 如果我们要创建不同的渲染器只需要传递不同的renderOption即可实现\r\nexport function createRenderer(renderOptions) {\r\n    const { createElement: hostCreateElement, patchProp: hostPatchProp, remove: hostRemove, createText: hostCreateText, setElementText: hostSetElementText, insert: hostInsert, nextSibling: hostNextSibling } = renderOptions;\r\n    // ------------ 处理 组件 --------------------\r\n    // 执行render方法\r\n    function setupRenderEffect(instance, container) {\r\n        // 创建一个effect在effect中调用render函数，对这个render进行收集依赖\r\n        // render中使用到变量发生变化会自执行render\r\n        instance.update = effect(function componentEffect() {\r\n            if (!instance.isMounted) {\r\n                // 这是初次渲染\r\n                const proxyToUser = instance.proxy;\r\n                // 组件render初次渲染的vnode \r\n                // 在vue3中组件就叫vnode(是对组件的描述) 组件的真正渲染内容叫做subtree  对应vue2的 $vnode 和_vnoode \r\n                const subTree = instance.subTree = instance.render.call(proxyToUser, proxyToUser); // 别忘记传递参数并修改this指向\r\n                // 初始化字树 用render函数返回值继续渲染\r\n                patch(null, subTree, container);\r\n                instance.isMounted = true;\r\n            }\r\n            else {\r\n                // 这是更新逻辑 依赖发生变化 则开始进行更新逻辑(diff算法)\r\n                const proxyToUser = instance.proxy;\r\n                const prevTree = instance.subTree; // 上一次的旧树\r\n                const nextTree = instance.render.call(proxyToUser, proxyToUser); // 重新执行render方法创建获取到新树的vnode\r\n                patch(prevTree, nextTree, container); // 进行patch方法的新老节点比对更新页面\r\n            }\r\n        }, {\r\n            scheduler: (effect) => {\r\n                // 通过scheduler来执行我们自定义的渲染函数 而不是执行收集到effect\r\n                queueJob(effect);\r\n            }\r\n        });\r\n    }\r\n    // 挂载组件\r\n    function mountComponent(initialVNode, container) {\r\n        // 组件的渲染流程 核心是调用setup拿到返回值，获取render函数的返回值进行渲染\r\n        // 1、创建一个实例\r\n        const instance = initialVNode.component = createInitialInstance(initialVNode);\r\n        // 2、将需要的数据解析到实例上\r\n        setupComponent(instance); // 初始化组件 将数据全部放到实例上\r\n        // 3、创建一个effect 让render函数执行\r\n        setupRenderEffect(instance, container);\r\n    }\r\n    // 处理组件\r\n    function processComponent(n1, n2, container) {\r\n        if (n1 === null) { // 进行组件的初始化\r\n            mountComponent(n2, container);\r\n        }\r\n        else { // 进行组件的更新\r\n        }\r\n    }\r\n    // ------------ 处理 组件 End--------------------\r\n    // ------------ 处理 元素 Start -----------------\r\n    function mountChildren(children, container) {\r\n        for (let i = 0; i < children.length; i++) {\r\n            // 需要注意如果孩子是多个文本的话 多次调用setElementText时候 后一次会把前一次设置的文本覆盖掉\r\n            const child = normalizeVNode(children[i]); // 文本处理成文本虚拟节点 解决覆盖问题\r\n            patch(null, child, container);\r\n        }\r\n    }\r\n    // 挂载元素\r\n    function mountElement(vnode, container, anchor = null) {\r\n        // 进行递归渲染\r\n        const { props, shapeFlag, children, type } = vnode;\r\n        const el = vnode.el = hostCreateElement(type);\r\n        if (props) { // 添加属性\r\n            for (let key in props) {\r\n                hostPatchProp(el, key, null, props[key]);\r\n            }\r\n        }\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) { // 孩子节点是文本 直接扔进去即可\r\n            hostSetElementText(el, children);\r\n        }\r\n        else if (shapeFlag & 16 /* ARRAY_CHILDREN */) { // 孩子是一个数组\r\n            mountChildren(children, el); // 可能出现 [文本， 文本] [文本， 虚拟节点] 等文本和虚拟节点的情况抽离方法处理\r\n        }\r\n        hostInsert(el, container, anchor);\r\n    }\r\n    // diff 算法比对儿子\r\n    function patchKeyChildren(c1, c2, el) {\r\n        // 对特殊情况进行优化(特殊情况就是首部或者尾部新增和删除)\r\n        let i = 0; // 默认从头开始比对\r\n        let e1 = c1.length - 1; // 尾指针\r\n        let e2 = c2.length - 1; // 尾指针\r\n        // sync from start 从头开始一个个比 遇到不同的就停止(尽可能较少比对区域) 旧 abcd 新 abde\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = c2[i];\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, el); // 比对属性和孩子\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // sync from end 从尾部开始一个个比\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = c2[e2];\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, el); // 比对属性和孩子\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 同序列挂载 头尾添加删除\r\n        // 如果完成后i > e1 说明新孩子有新增节点 老的少新的多 需要新增i和e2之间的元素\r\n        if (i > e1) {\r\n            if (i <= e2) { // 表示有新增的部分\r\n                // 想知道是向前插入还是向后插入\r\n                let anchor;\r\n                const nextPos = e2 + 1; // 获取到e2的下一个位置\r\n                if (nextPos >= c2.length) { // 则说明是从前往后比对 需要向后插入\r\n                    anchor = null;\r\n                }\r\n                else { // 则说明是从后往前比对 需要向前插入\r\n                    anchor = c2[nextPos].el; // 这里为什么是nextPos索引因为 这种是e2向左移动执行减操作 +1就是让e2加操作向右侧移动去上一个索引\r\n                }\r\n                while (i <= e2) { // 循环新增节点\r\n                    patch(null, c2[i], el, anchor);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        else if (i > e2) { // 老的多新的少\r\n            while (i <= e1) { // 将老的多的进行删除\r\n                unmount(c1[i]);\r\n                i++;\r\n            }\r\n        }\r\n        else {\r\n            // 乱序比较 需要尽可能的复用 把中间不相等部分做如下处理遍历新的元素做一个映射表老的元素去里面找 一样的就复用 不一样的要不就插入要不就删除\r\n            // 例如: abcdefg abecdhfg [5340]\r\n            let s1 = i;\r\n            let s2 = i;\r\n            // 遍历新的元素将元素的key与索引进行映射\r\n            const keyToNewIndexMap = new Map();\r\n            for (let i = s2; i <= e2; i++) {\r\n                const child = c2[i];\r\n                keyToNewIndexMap.set(child.key, i);\r\n            }\r\n            // 将patch过元素进行记录下来 是为了知道哪些是新增元素\r\n            const toBePatched = e2 - s2 + 1;\r\n            const newIndexToOldIndexMap = new Array(toBePatched).fill(0); // 将新的索引到老的索引进行记录 表明是已经patch过的(不是0的表示是已经patch过的是0的表明是没有patch过的是新增的元素)\r\n            // 去老的里面查找看有没有复用的\r\n            for (let i = s1; i <= e1; i++) {\r\n                const oldChild = c1[i];\r\n                const newIndex = keyToNewIndexMap.get(oldChild.key);\r\n                if (newIndex === undefined) { // 说明新的中没有需要删除\r\n                    unmount(oldChild);\r\n                }\r\n                else { // 如果找到了 则去比较新旧节点以及孩子节点 (这里比较完了之后位置有问题)\r\n                    // 新和旧的关系 索引关系\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1; // 减去s2是为了 将索引相对 s2的下标  为什么需要i+1因为如果正好为0的时候正好和我们的初始值一样，为了保证不一样我们需要+1 到时使用的时候记得减去即可\r\n                    patch(oldChild, c2[newIndex], el);\r\n                }\r\n            }\r\n            // [5 ,3,4, 0 ] => [1, 2] => []\r\n            const increasingNewIndexSequence = getSequence(newIndexToOldIndexMap); //求出最常的递增索引序列\r\n            let j = increasingNewIndexSequence.length - 1; // 取出最后一项\r\n            for (let i = toBePatched - 1; i >= 0; i--) { // 插入新增的元素 这里为什么是倒叙 是因为这样的话我们就可以插入的前一个元素作为要插入下一个元素的参照物\r\n                const currentIndex = s2 + i; // 之前减去过s2 现在复原找到元素原本的位置 如例子所属的话就是h的索引\r\n                let child = c2[currentIndex];\r\n                let anchor = currentIndex + 1 < c2.length ? c2[currentIndex + 1].el : null; // 获取下一项 如果存在则需要插入到下一项的前面如果不存在只需要插入到最后即可\r\n                if (newIndexToOldIndexMap[i] === 0) { // 没有被patch过 是新增元素进行新增操作\r\n                    patch(null, child, el, anchor);\r\n                }\r\n                else { // 操作当前的D 以D的先一个作为参照物插入 注意📢 这里else插入其实并不是插入而是移动位置 因为使用beforeInser或者appendChild插入一个已经存在的dom元素浏览器会将此元素从之前的位置移动到新的位置\r\n                    if (i !== increasingNewIndexSequence[j]) { // 取出最后一个索引 不匹配则进行移动否则不进行移动(优化移动次数)\r\n                        hostInsert(child.el, el, anchor); // 但是虽然浏览器可以帮我们移动但是如果之前的顺序和新的顺序有一部分是一致的 本不该移动但是还是全部插入移动 所以性能会稍微差点需要优化(最常递增子序列优化移动) 我们期望是尽可能的少移动\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 求最长的递增子序列\r\n    function getSequence(arr) {\r\n        const len = arr.length;\r\n        const result = [0]; // 里面放的是索引\r\n        const p = arr.slice(0); // 里面内容无所谓 和原数组相同 用来存放前一个索引\r\n        let start;\r\n        let end;\r\n        let middle;\r\n        for (let i = 1; i < len; i++) {\r\n            const arrI = arr[i];\r\n            if (arrI !== 0) { // 当不为0的时候才开始操作因为 0 的表示的是新增元素 需要插入而不是排序\r\n                const resultLastIndex = result[result.length - 1]; // 取最后一个索引\r\n                if (arr[resultLastIndex] < arrI) { // 当前值大于最后一个\r\n                    p[i] = resultLastIndex; // 记录前一个索引\r\n                    result.push(i);\r\n                    continue;\r\n                }\r\n                if (arr[resultLastIndex] > arrI) {\r\n                    // 采用二分查找的方式进行 寻找最小的比当前数大的元素\r\n                    start = 0;\r\n                    end = result.length - 1;\r\n                    while (start < end) { // 重合就说明找到\r\n                        middle = Math.floor((start + end) / 2);\r\n                        if (arr[result[middle]] < arrI) {\r\n                            start = middle + 1;\r\n                        }\r\n                        else {\r\n                            end = middle;\r\n                        }\r\n                    }\r\n                    // 循环结束start/end 就是找到位置\r\n                    if (arrI < arr[result[start]]) { // 找到比当前值大的一个数\r\n                        if (start > 0) { // 索引0 没有前一项索引所以不赋值\r\n                            p[i] = result[start - 1]; // 找到需要替换元素的前一个索引 TODO: 这里是不是可以是 p[i] = p[start]\r\n                        }\r\n                        result[start] = i; //用当前值替换找到的值\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log('p=>', p);\r\n        // 从最后一个元素开始遍历 根据前驱节点遍历输出整个链条\r\n        let len1 = result.length; // 总的个数 之前说过这里的个数正确的\r\n        let last = result[len1 - 1]; // 取到最后一项索引\r\n        while (len1-- > 0) { //TODO: 这里的向前遍历没懂\r\n            result[len1] = last;\r\n            last = p[last];\r\n        }\r\n        return result;\r\n    }\r\n    // 卸载孩子\r\n    function unmountChild(children) {\r\n        for (let i = 0; i < children.length; i++) {\r\n            unmount(children[i]);\r\n        }\r\n    }\r\n    // 进行儿子的比对 (老的有儿子新的没儿子 新的有儿子老的没儿子 新的老的都有儿子 (进行diff对比))\r\n    function patchChildren(n1, n2, el) {\r\n        const c1 = n1.children;\r\n        const c2 = n2.children;\r\n        // 分别标识孩子的状况\r\n        const prevShapFlag = n1.shapeFlag;\r\n        const shapeFalg = n2.shapeFlag;\r\n        if (shapeFalg && shapeFalg & 8 /* TEXT_CHILDREN */) { // 当前孩子是文本\r\n            if (prevShapFlag && prevShapFlag & 16 /* ARRAY_CHILDREN */) { // 旧孩子是数组需要先进行卸载孩子这里不判断元素的原因是 虚拟节点孩子节点要么是字符串要么是数组(元素也会被处理为数组)\r\n                unmountChild(c1); // 如果c1中包含组件会调用组件的卸载方法\r\n            }\r\n            // 两个都是文本\r\n            if (c1 !== c2) {\r\n                console.log(el, c2);\r\n                hostSetElementText(el, c2);\r\n            }\r\n        }\r\n        else { // 本次孩子是数组\r\n            if (prevShapFlag && prevShapFlag & 16 /* ARRAY_CHILDREN */) { //  之前是数组 因为h函数在创建的时候一个也会被包裹为数组\r\n                if (shapeFalg && shapeFalg & 16 /* ARRAY_CHILDREN */) { // 当前是数组 兼容万一传参错误的问题 所以加一层判断\r\n                    // diff算\r\n                    patchKeyChildren(c1, c2, el);\r\n                }\r\n                else { // 当前没有孩子 当前是null 特殊情况\r\n                    unmountChild(c1); // 卸载之前的孩子\r\n                }\r\n            }\r\n            else { // 之前是文本\r\n                if (prevShapFlag && prevShapFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(el, ''); // 清空之前的文本\r\n                }\r\n                if (shapeFalg && shapeFalg & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, el); // 挂载当前孩子\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 比对属性\r\n    function patchProps(oldProps, newProps, el) {\r\n        if (oldProps !== newProps) {\r\n            for (let key in newProps) {\r\n                const prev = oldProps[key];\r\n                const next = newProps[key];\r\n                if (prev !== next) {\r\n                    hostPatchProp(el, key, prev, next);\r\n                }\r\n            }\r\n            // 老的中有新的中没有则删除\r\n            for (let key in oldProps) {\r\n                const prev = oldProps[key];\r\n                if (!(key in newProps)) {\r\n                    hostPatchProp(el, key, prev, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 比对元素(更新元素)\r\n    function patchElement(n1, n2, container) {\r\n        // 元素是相同节点 需要复用节点\r\n        const el = n2.el = n1.el;\r\n        // 更新属性 \r\n        const oldProps = n1.props || {};\r\n        const newProps = n2.props || {};\r\n        patchProps(oldProps, newProps, el);\r\n        // 更新儿子\r\n        patchChildren(n1, n2, el);\r\n    }\r\n    // 处理元素\r\n    function processElement(n1, n2, container, anchor) {\r\n        if (n1 === null) { // 元素挂载\r\n            mountElement(n2, container, anchor);\r\n        }\r\n        else { // 元素更新\r\n            console.log('进行元素更新逻辑');\r\n            patchElement(n1, n2, container);\r\n        }\r\n    }\r\n    // ------------ 处理 元素 End -----------------\r\n    // ------------ 处理 文本 Start----------------\r\n    function processText(n1, n2, container) {\r\n        if (n1 === null) { // 文本挂载\r\n            n2.el = hostCreateText(n2.children);\r\n            hostInsert(n2.el, container);\r\n        }\r\n        else { // 文本的更新\r\n        }\r\n    }\r\n    // ------------ 处理 文本 End----------------\r\n    // 是不是同一个类型的虚拟节点\r\n    function isSameVNodeType(n1, n2) {\r\n        return n1.type === n2.type && n1.key === n2.key;\r\n    }\r\n    // 卸载(单独抽离出来是为了扩展 后期如果是组件的话 需要调用组件卸载时的生命周期等)\r\n    function unmount(n1) {\r\n        hostRemove(n1.el);\r\n    }\r\n    // 参数 n1: 老的虚拟节点 n2: 新的虚拟节点 \r\n    function patch(n1, n2, container, anchor = null) {\r\n        // 针对不同的类型做初始化方式\r\n        const { shapeFlag, type } = n2;\r\n        if (n1 && !isSameVNodeType(n1, n2)) { // 判断前后的虚拟节点是不是同一个类型的 不是同类型的不用进行diff比较直接替换\r\n            // 首先删除掉n1元素 再挂载n2元素\r\n            anchor = hostNextSibling(n1.el); // 获取元素的下一个兄弟节点作为参考点防止新增节点插入到container最后\r\n            unmount(n1);\r\n            n1 = null; // 设置为null 进入元素的挂载流程\r\n        }\r\n        switch (type) { // 后期有其他类型也可以在这里进行扩展\r\n            case TEXT:\r\n                processText(n1, n2, container);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) { // 是一个元素\r\n                    processElement(n1, n2, container, anchor);\r\n                }\r\n                else if (shapeFlag & 4 /* STATEFUL_COMPONENT */) { // 是一个组件\r\n                    processComponent(n1, n2, container);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    // 渲染函数core核心函数 作用可以将一个虚拟节点挂载到一个容器上\r\n    const render = function (vnode, container) {\r\n        // 根据不同的虚拟节点创建真实的节点\r\n        // 默认进行初始化流程\r\n        patch(null, vnode, container); // 初始化、更新都会使用此方法进行\r\n    };\r\n    return {\r\n        // 这里因为createApp是一个用户可以调用的api所以我们打算再次进行拆分拆到API的文件夹中\r\n        createApp: createAppApi(render)\r\n    };\r\n}\r\n// 框架流程都是将组件 => 虚拟DOM => 真实DOM => 挂载到页面\r\n","references":["/Users/fuzhuoning/Desktop/own/vue3/packages/reactivity/src/index.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/shared/src/index.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/runtime-core/src/apiCreateApp.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/runtime-core/src/component.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/runtime-core/src/sechduler.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/runtime-core/src/vnode.ts"]}
