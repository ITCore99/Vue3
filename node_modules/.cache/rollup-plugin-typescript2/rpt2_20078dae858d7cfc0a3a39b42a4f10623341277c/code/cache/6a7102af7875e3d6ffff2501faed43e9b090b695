{"code":"import { isFunction } from \"@vue/shared\";\r\nimport { effect } from './';\r\nimport { track, trigger } from \"./effect\";\r\n/**\r\n * computed 默认不执行 只有调用才会执行\r\n * 存在缓存 依赖的值不发生变化不执行 使用缓存\r\n * 当依赖的值发生了变化 不会立即执行 而是当下一次获取的时候在执行\r\n * 我们发现computed的值 使用的时候是可以.value的所以 应该是ref\r\n */\r\nclass ComputedRefImpl {\r\n    setter;\r\n    _dirty = true; // 缓存标识 默认为true即取值时不要使用缓存\r\n    _value;\r\n    effect;\r\n    constructor(getter, setter) {\r\n        this.setter = setter;\r\n        // 计算属性默认产生一个effect使用effect来进行收集依赖\r\n        this.effect = effect(getter, {\r\n            lazy: true,\r\n            scheduler: (effect) => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(this, 1 /* SET */, 'value'); // 当有computed 有依赖的话去更新\r\n                }\r\n            }\r\n        });\r\n    }\r\n    // 取值\r\n    get value() {\r\n        if (this._dirty) { // 只有脏的的时候才执行否则将缓存下来的老值进行返回\r\n            this._value = this.effect();\r\n            this._dirty = false;\r\n        }\r\n        track(this, 0 /* GET */, 'value'); // 有可能在effect中使用computed所以也要收集自己的依赖\r\n        return this._value;\r\n    }\r\n    // 设置值\r\n    set value(newValue) {\r\n        this.setter(newValue); // 如果用户传递了set方法 会调用用户set方法\r\n    }\r\n}\r\nfunction computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = () => {\r\n            console.warn('computed value must be is readOnly');\r\n        };\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter);\r\n}\r\nexport { computed };\r\n","references":["/Users/fuzhuoning/Desktop/own/vue3/packages/shared/src/index.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/reactivity/src/index.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/reactivity/src/effect.ts","/Users/fuzhuoning/Desktop/own/vue3/packages/reactivity/src/operators.ts"]}
