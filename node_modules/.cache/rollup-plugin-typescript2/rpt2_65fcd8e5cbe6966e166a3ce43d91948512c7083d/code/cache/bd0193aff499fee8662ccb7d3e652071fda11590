{"code":"// 创建一个组件实例\r\nexport function createInitialInstance(vnode) {\r\n    // webComponent 组件必备的有属性和插槽\r\n    const instance = {\r\n        vnode,\r\n        type: vnode.type,\r\n        props: {},\r\n        slots: {},\r\n        setupState: {},\r\n        ctx: {},\r\n        isMounted: false,\r\n        render: null\r\n    };\r\n    instance.ctx = { _: instance };\r\n    return instance;\r\n}\r\n// 初始化启动组件\r\nexport function setupComponent(instance) {\r\n    const { props, children } = instance.vnode;\r\n    // 根据props 解析出 props和attrs 更新到instance上\r\n    instance.props = props; // 对应源码中 => initProps\r\n    instance.children = children; // 插槽的解析 => initSlots\r\n    // 判断当前是不是有状态的组件\r\n    const isStateful = instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n    if (isStateful) {\r\n        // 调用实例的setup方法，用setup函数的返回值填充instance的setupState和render\r\n        setupStatefulComponent(instance);\r\n    }\r\n}\r\nfunction setupStatefulComponent(instance) {\r\n    // 1、属性的代理 方便用户访问 传递给render函数的参数\r\n    // 2、获取组件的类型 拿到组件的setup 方法\r\n    const component = instance.type;\r\n    const { setup } = component;\r\n    setup();\r\n}\r\n","references":["/Users/fuzhuoning/Desktop/own/vue3/packages/shared/src/index.ts"]}
