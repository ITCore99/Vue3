{"code":"// 创建虚拟节点的核心\r\nimport { isArray, isObject, isString } from \"@vue/shared\";\r\n// h函数就是创建虚拟节点 h方法就是此方法 h('div', { style: {color: '#f00'}, hello world})\r\nexport const createVNode = function (type, props, children = null) {\r\n    // 可以根据type来进行判断是组件还是元素\r\n    const shapeFlag = isString(type) ?\r\n        1 /* ELEMENT */ : isObject(type) ?\r\n        4 /* STATEFUL_COMPONENT */ : 0;\r\n    const vnode = {\r\n        __v_isVnode: true,\r\n        type,\r\n        props,\r\n        children,\r\n        key: props && props.key,\r\n        el: null,\r\n        shapeFlag,\r\n        componet: null, // 用来存放组件的实例\r\n    };\r\n    // 对孩子类型进行处理\r\n    normalizeChild(vnode, children);\r\n    return vnode;\r\n};\r\nfunction normalizeChild(vnode, children) {\r\n    let type = vnode.type;\r\n    if (children === null) { // 不进行处理\r\n    }\r\n    else if (isArray(children)) { // 孩子是数组\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else { // 不考虑插槽 这里就是文本孩子\r\n        type = 8 /* TEXT_CHILDREN */;\r\n    }\r\n    vnode.shapeFlag = vnode.shapeFlag | type;\r\n}\r\n","references":["/Users/fuzhuoning/Desktop/own/vue3/packages/shared/src/index.ts"]}
